/**
 * Cineast RESTful API
 * Cineast is vitrivr's content-based multimedia retrieval engine. This is it's RESTful API.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@vitrivr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.models


import com.squareup.moshi.Json

/**
 *
 * @param queryId
 * @param hints
 * @param distance
 * @param distanceWeights
 * @param norm
 * @param resultsPerModule
 * @param maxResults
 * @param relevantSegmentIds
 * @param distanceIfEmpty
 * @param normIfEmpty
 * @param distanceWeightsIfEmpty
 * @param correspondenceFunction
 * @param correspondenceFunctionIfEmpty
 * @param rawResultsPerModule
 */

data class QueryConfig(
    @Json(name = "queryId")
    val queryId: java.util.UUID? = null,
    @Json(name = "hints")
    val hints: kotlin.collections.List<QueryConfig.Hints>? = null,
    @Json(name = "distance")
    val distance: QueryConfig.Distance? = null,
    @Json(name = "distanceWeights")
    val distanceWeights: kotlin.collections.List<kotlin.Float>? = null,
    @Json(name = "norm")
    val norm: kotlin.Float? = null,
    @Json(name = "resultsPerModule")
    val resultsPerModule: kotlin.Int? = null,
    @Json(name = "maxResults")
    val maxResults: kotlin.Int? = null,
    @Json(name = "relevantSegmentIds")
    val relevantSegmentIds: kotlin.collections.List<kotlin.String>? = null,
    @Json(name = "distanceIfEmpty")
    val distanceIfEmpty: QueryConfig? = null,
    @Json(name = "normIfEmpty")
    val normIfEmpty: QueryConfig? = null,
    @Json(name = "distanceWeightsIfEmpty")
    val distanceWeightsIfEmpty: QueryConfig? = null,
    @Json(name = "correspondenceFunction")
    val correspondenceFunction: kotlin.Any? = null,
    @Json(name = "correspondenceFunctionIfEmpty")
    val correspondenceFunctionIfEmpty: QueryConfig? = null,
    @Json(name = "rawResultsPerModule")
    val rawResultsPerModule: kotlin.Int? = null
) {

    /**
     *
     * Values: exact,inexact,lsh,ecp,mi,pq,sh,va,vaf,vav,sequential,empirical
     */
    enum class Hints(val value: kotlin.String) {
        @Json(name = "exact")
        exact("exact"),

        @Json(name = "inexact")
        inexact("inexact"),

        @Json(name = "lsh")
        lsh("lsh"),

        @Json(name = "ecp")
        ecp("ecp"),

        @Json(name = "mi")
        mi("mi"),

        @Json(name = "pq")
        pq("pq"),

        @Json(name = "sh")
        sh("sh"),

        @Json(name = "va")
        va("va"),

        @Json(name = "vaf")
        vaf("vaf"),

        @Json(name = "vav")
        vav("vav"),

        @Json(name = "sequential")
        sequential("sequential"),

        @Json(name = "empirical")
        empirical("empirical");
    }

    /**
     *
     * Values: chisquared,correlation,cosine,hamming,jaccard,kullbackleibler,chebyshev,euclidean,squaredeuclidean,manhattan,minkowski,spannorm,haversine
     */
    enum class Distance(val value: kotlin.String) {
        @Json(name = "chisquared")
        chisquared("chisquared"),

        @Json(name = "correlation")
        correlation("correlation"),

        @Json(name = "cosine")
        cosine("cosine"),

        @Json(name = "hamming")
        hamming("hamming"),

        @Json(name = "jaccard")
        jaccard("jaccard"),

        @Json(name = "kullbackleibler")
        kullbackleibler("kullbackleibler"),

        @Json(name = "chebyshev")
        chebyshev("chebyshev"),

        @Json(name = "euclidean")
        euclidean("euclidean"),

        @Json(name = "squaredeuclidean")
        squaredeuclidean("squaredeuclidean"),

        @Json(name = "manhattan")
        manhattan("manhattan"),

        @Json(name = "minkowski")
        minkowski("minkowski"),

        @Json(name = "spannorm")
        spannorm("spannorm"),

        @Json(name = "haversine")
        haversine("haversine");
    }
}

