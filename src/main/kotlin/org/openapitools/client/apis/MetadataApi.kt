/**
 * Cineast RESTful API
 * Cineast is vitrivr's content-based multimedia retrieval engine. This is it's RESTful API.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@vitrivr.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.apis

import org.openapitools.client.infrastructure.*
import org.openapitools.client.models.*

class MetadataApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("org.openapitools.client.baseUrl", "http://localhost:4567")
        }
    }

    /**
     * Find metadata for the given object id
     * Find metadata by the given object id
     * @param id The object id to find metadata of
     * @return MediaObjectMetadataQueryResult
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findMetaById(id: kotlin.String): MediaObjectMetadataQueryResult {
        val localVariableConfig = findMetaByIdRequestConfig(id = id)

        val localVarResponse = request<MediaObjectMetadataQueryResult>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaObjectMetadataQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * To obtain the request config of the operation findMetaById
     *
     * @param id The object id to find metadata of
     * @return RequestConfig
     */
    fun findMetaByIdRequestConfig(id: kotlin.String): RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/metadata/by/id/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
     * Find metadata for specific object id in given domain with given key
     * The description
     * @param id The object id
     * @param domain The domain name
     * @param key Metadata key
     * @return MediaObjectMetadataQueryResult
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findMetaFullyQualified(
        id: kotlin.String,
        domain: kotlin.String,
        key: kotlin.String
    ): MediaObjectMetadataQueryResult {
        val localVariableConfig = findMetaFullyQualifiedRequestConfig(id = id, domain = domain, key = key)

        val localVarResponse = request<MediaObjectMetadataQueryResult>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaObjectMetadataQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * To obtain the request config of the operation findMetaFullyQualified
     *
     * @param id The object id
     * @param domain The domain name
     * @param key Metadata key
     * @return RequestConfig
     */
    fun findMetaFullyQualifiedRequestConfig(
        id: kotlin.String,
        domain: kotlin.String,
        key: kotlin.String
    ): RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/metadata/of/{id}/in/{domain}/with/{key}".replace("{" + "id" + "}", "$id")
                .replace("{" + "domain" + "}", "$domain").replace("{" + "key" + "}", "$key"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
     * Find metadata for specific object id in given domain
     * Find metadata for specific object id in given domain
     * @param domain The domain of the metadata to find
     * @param id The object id of the multimedia object to find metadata for
     * @return MediaObjectMetadataQueryResult
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findMetadataByDomain(domain: kotlin.String, id: kotlin.String): MediaObjectMetadataQueryResult {
        val localVariableConfig = findMetadataByDomainRequestConfig(domain = domain, id = id)

        val localVarResponse = request<MediaObjectMetadataQueryResult>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaObjectMetadataQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * To obtain the request config of the operation findMetadataByDomain
     *
     * @param domain The domain of the metadata to find
     * @param id The object id of the multimedia object to find metadata for
     * @return RequestConfig
     */
    fun findMetadataByDomainRequestConfig(domain: kotlin.String, id: kotlin.String): RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/metadata/in/{domain}/by/id/{domain}".replace("{" + "domain" + "}", "$domain")
                .replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
     * Find metadata in the specified domain for all the given ids
     * Find metadata in the specified domain for all the given ids
     * @param domain The domain of the metadata to find
     * @param idList  (optional)
     * @return MediaObjectMetadataQueryResult
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findMetadataByDomainBatched(domain: kotlin.String, idList: IdList?): MediaObjectMetadataQueryResult {
        val localVariableConfig = findMetadataByDomainBatchedRequestConfig(domain = domain, idList = idList)

        val localVarResponse = request<MediaObjectMetadataQueryResult>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaObjectMetadataQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * To obtain the request config of the operation findMetadataByDomainBatched
     *
     * @param domain The domain of the metadata to find
     * @param idList  (optional)
     * @return RequestConfig
     */
    fun findMetadataByDomainBatchedRequestConfig(domain: kotlin.String, idList: IdList?): RequestConfig {
        val localVariableBody: kotlin.Any? = idList
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/find/metadata/in/{domain}".replace("{" + "domain" + "}", "$domain"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
     * Find metadata for a given object id with specified key
     * Find metadata for a given object id with specified key
     * @param key The key of the metadata to find
     * @param id The object id of for which the metadata should be find
     * @return MediaObjectMetadataQueryResult
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findMetadataByKey(key: kotlin.String, id: kotlin.String): MediaObjectMetadataQueryResult {
        val localVariableConfig = findMetadataByKeyRequestConfig(key = key, id = id)

        val localVarResponse = request<MediaObjectMetadataQueryResult>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaObjectMetadataQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * To obtain the request config of the operation findMetadataByKey
     *
     * @param key The key of the metadata to find
     * @param id The object id of for which the metadata should be find
     * @return RequestConfig
     */
    fun findMetadataByKeyRequestConfig(key: kotlin.String, id: kotlin.String): RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/metadata/with/{key}/by/id/{id}".replace("{" + "key" + "}", "$key")
                .replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
     * Find metadata for a given object id with specified key
     * Find metadata with a the speicifed key from the path across all domains and for the provided ids
     * @param key The key of the metadata to find
     * @param idList  (optional)
     * @return MediaObjectMetadataQueryResult
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findMetadataByKeyBatched(key: kotlin.String, idList: IdList?): MediaObjectMetadataQueryResult {
        val localVariableConfig = findMetadataByKeyBatchedRequestConfig(key = key, idList = idList)

        val localVarResponse = request<MediaObjectMetadataQueryResult>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaObjectMetadataQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * To obtain the request config of the operation findMetadataByKeyBatched
     *
     * @param key The key of the metadata to find
     * @param idList  (optional)
     * @return RequestConfig
     */
    fun findMetadataByKeyBatchedRequestConfig(key: kotlin.String, idList: IdList?): RequestConfig {
        val localVariableBody: kotlin.Any? = idList
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/find/metadata/with/{key}".replace("{" + "key" + "}", "$key"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
     * Finds metadata for the given list of object ids
     * Finds metadata for the given list of object ids
     * @param optionallyFilteredIdList  (optional)
     * @return MediaObjectMetadataQueryResult
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findMetadataForObjectIdBatched(optionallyFilteredIdList: OptionallyFilteredIdList?): MediaObjectMetadataQueryResult {
        val localVariableConfig =
            findMetadataForObjectIdBatchedRequestConfig(optionallyFilteredIdList = optionallyFilteredIdList)

        val localVarResponse = request<MediaObjectMetadataQueryResult>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaObjectMetadataQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * To obtain the request config of the operation findMetadataForObjectIdBatched
     *
     * @param optionallyFilteredIdList  (optional)
     * @return RequestConfig
     */
    fun findMetadataForObjectIdBatchedRequestConfig(optionallyFilteredIdList: OptionallyFilteredIdList?): RequestConfig {
        val localVariableBody: kotlin.Any? = optionallyFilteredIdList
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/find/metadata/by/id",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
     * Find features for the given id
     * Find features by the given id
     * @param id The id to find features of
     * @return FeaturesAllCategoriesQueryResult
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findSegFeatById(id: kotlin.String): FeaturesAllCategoriesQueryResult {
        val localVariableConfig = findSegFeatByIdRequestConfig(id = id)

        val localVarResponse = request<FeaturesAllCategoriesQueryResult>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FeaturesAllCategoriesQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * To obtain the request config of the operation findSegFeatById
     *
     * @param id The id to find features of
     * @return RequestConfig
     */
    fun findSegFeatByIdRequestConfig(id: kotlin.String): RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/feature/all/by/id/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
     * Find metadata for the given segment id
     * Find metadata by the given segment id
     * @param id The segment id to find metadata of
     * @return MediaSegmentMetadataQueryResult
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findSegMetaById(id: kotlin.String): MediaSegmentMetadataQueryResult {
        val localVariableConfig = findSegMetaByIdRequestConfig(id = id)

        val localVarResponse = request<MediaSegmentMetadataQueryResult>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MediaSegmentMetadataQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * To obtain the request config of the operation findSegMetaById
     *
     * @param id The segment id to find metadata of
     * @return RequestConfig
     */
    fun findSegMetaByIdRequestConfig(id: kotlin.String): RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/metadata/by/segmentid/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
     * Find tag ids for the given id
     * Find tag ids for the given id
     * @param id The id to find tagids of
     * @return TagIDsForElementQueryResult
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findTagsById(id: kotlin.String): TagIDsForElementQueryResult {
        val localVariableConfig = findTagsByIdRequestConfig(id = id)

        val localVarResponse = request<TagIDsForElementQueryResult>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TagIDsForElementQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * To obtain the request config of the operation findTagsById
     *
     * @param id The id to find tagids of
     * @return RequestConfig
     */
    fun findTagsByIdRequestConfig(id: kotlin.String): RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/feature/tags/by/id/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
     * Find Text for the given id and retrieval category
     * Find Text by the given id and retrieval category
     * @param id The id to find text of
     * @param category The category for which retrieval shall be performed
     * @return FeaturesTextCategoryQueryResult
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findTextByIDAndCat(id: kotlin.String, category: kotlin.String): FeaturesTextCategoryQueryResult {
        val localVariableConfig = findTextByIDAndCatRequestConfig(id = id, category = category)

        val localVarResponse = request<FeaturesTextCategoryQueryResult>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FeaturesTextCategoryQueryResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * To obtain the request config of the operation findTextByIDAndCat
     *
     * @param id The id to find text of
     * @param category The category for which retrieval shall be performed
     * @return RequestConfig
     */
    fun findTextByIDAndCatRequestConfig(id: kotlin.String, category: kotlin.String): RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/find/feature/text/by/{id}/{category}".replace("{" + "id" + "}", "$id")
                .replace("{" + "category" + "}", "$category"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

}
