package ch.unibas.dmi.dbis.vrem.rest

import ch.unibas.dmi.dbis.vrem.cineast.client.infrastructure.ApiClient
import ch.unibas.dmi.dbis.vrem.config.Config
import ch.unibas.dmi.dbis.vrem.database.VREMDao
import ch.unibas.dmi.dbis.vrem.rest.handlers.DeleteRestHandler
import ch.unibas.dmi.dbis.vrem.rest.handlers.GetRestHandler
import ch.unibas.dmi.dbis.vrem.rest.handlers.PostRestHandler
import ch.unibas.dmi.dbis.vrem.rest.handlers.PutRestHandler
import ch.unibas.dmi.dbis.vrem.rest.handlers.content.ContentHandler
import ch.unibas.dmi.dbis.vrem.rest.handlers.exhibit.ListExhibitsHandler
import ch.unibas.dmi.dbis.vrem.rest.handlers.exhibit.SaveExhibitHandler
import ch.unibas.dmi.dbis.vrem.rest.handlers.exhibition.ListExhibitionsHandler
import ch.unibas.dmi.dbis.vrem.rest.handlers.exhibition.LoadExhibitionByIdHandler
import ch.unibas.dmi.dbis.vrem.rest.handlers.exhibition.LoadExhibitionByNameHandler
import ch.unibas.dmi.dbis.vrem.rest.handlers.exhibition.SaveExhibitionHandler
import ch.unibas.dmi.dbis.vrem.rest.handlers.generation.ExhibitionGenerationHandler
import ch.unibas.dmi.dbis.vrem.rest.handlers.generation.RoomGenerationHandler
import com.github.ajalt.clikt.core.CliktCommand
import com.github.ajalt.clikt.parameters.options.default
import com.github.ajalt.clikt.parameters.options.option
import io.javalin.Javalin
import io.javalin.apibuilder.ApiBuilder.*
import io.javalin.plugin.json.FromJsonMapper
import io.javalin.plugin.json.JavalinJson
import io.javalin.plugin.json.ToJsonMapper
import io.javalin.plugin.openapi.OpenApiOptions
import io.javalin.plugin.openapi.OpenApiPlugin
import io.javalin.plugin.openapi.jackson.JacksonToJsonMapper
import io.javalin.plugin.openapi.ui.ReDocOptions
import io.javalin.plugin.openapi.ui.SwaggerOptions
import io.swagger.v3.oas.models.info.Info
import kotlinx.serialization.ExperimentalSerializationApi
import kotlinx.serialization.KSerializer
import kotlinx.serialization.json.Json
import kotlinx.serialization.serializer
import mu.KotlinLogging
import java.io.File
import java.time.Duration

private val logger = KotlinLogging.logger {}

/**
 * VREM API endpoint class.
 */
@ExperimentalSerializationApi
class API : CliktCommand(name = "server", help = "Start the REST API endpoint") {

    private val config: String by option("-c", "--config", help = "Path to the config file").default("config.json")

    // TODO Consider replacing KotlinX with Jackson.
    private val openApiSerializer = object : ToJsonMapper {
        override fun map(obj: Any): String {
            return JacksonToJsonMapper(JacksonToJsonMapper.defaultObjectMapper).map(obj)
        }
    }

    init {
        // Overwrites the default mapper (Jackson) of Javalin for serialization to make sure we're using Kotlinx.
        JavalinJson.toJsonMapper = object : ToJsonMapper {
            override fun map(obj: Any): String {
                val serializer = serializer(obj.javaClass)
                val jsonObj = Json {
                    // serializersModule = IdKotlinXSerializationModule // To properly serialize IDs.
                    encodeDefaults = true // Don't omit values generated by default.
                }
                return jsonObj.encodeToString(serializer, obj)
            }
        }

        // Overwrites the default mapper (Jackson) of Javalin for deserialization to make sure we're using Kotlinx.
        JavalinJson.fromJsonMapper = object : FromJsonMapper {
            override fun <T> map(json: String, targetClass: Class<T>): T {
                @Suppress("UNCHECKED_CAST")
                val deserializer = serializer(targetClass) as KSerializer<T>
                val jsonObj = Json {
                    // serializersModule = IdKotlinXSerializationModule // To properly deserialize IDs.
                    coerceInputValues = true // Use default values if key not provided.
                    ignoreUnknownKeys = true // Just ignore unknown keys and use what we have.
                }
                return jsonObj.decodeFromString(deserializer, json)
            }
        }
    }

    override fun run() {
        val config = Config.readConfig(this.config)
        val (reader, writer) = VREMDao.getDAOs(config.database)
        val docRoot = File(config.server.documentRoot).toPath()

        // Give Cineast enough time to process the request before timing out.
        ApiClient.builder.readTimeout(Duration.ofSeconds(config.cineast.queryTimeoutSeconds))

        // Handlers.
        val apiRestHandlers = listOf(
            ContentHandler(docRoot, config.cineast),
            ListExhibitsHandler(reader),
            SaveExhibitHandler(writer, docRoot),
            ListExhibitionsHandler(reader),
            LoadExhibitionByIdHandler(reader),
            LoadExhibitionByNameHandler(reader),
            SaveExhibitionHandler(writer),
            RoomGenerationHandler(config.cineast),
            ExhibitionGenerationHandler(config.cineast)
        )

        // API endpoint.
        val endpoint = Javalin.create { conf ->
            conf.registerPlugin(
                OpenApiPlugin(
                    OpenApiOptions(
                        Info().apply {
                            version("1.0")
                            description("")
                        }
                    ).apply {
                        path("/swagger-docs")
                        swagger(SwaggerOptions("/swagger-ui"))
                        reDoc(ReDocOptions("/redoc"))
                        activateAnnotationScanningFor("ch.unibas.dmi.dbis.vrem.rest.handlers")
//                        toJsonMapper(JavalinJson.toJsonMapper)
                        toJsonMapper(openApiSerializer)
                    }
                )
            )

            conf.defaultContentType = "application/json"
            conf.enableCorsForAllOrigins()

            // Logger.
            /*conf.requestLogger { ctx, ms ->
                logger.info { "Request received: ${ctx.req.requestURI}" }
            }*/
        }.routes {
            path("api") {
                apiRestHandlers.forEach { handler ->

                    path(handler.route) {

                        if (handler is GetRestHandler<*>) {
                            get(handler::get)
                        }

                        if (handler is PostRestHandler<*>) {
                            post(handler::post)
                        }

                        if (handler is PutRestHandler<*>) {
                            put(handler::put)
                        }

                        if (handler is DeleteRestHandler<*>) {
                            delete(handler::delete)
                        }

                    }

                }
            }
        }

        endpoint.after { ctx ->
            ctx.header("Access-Control-Allow-Origin", "*")
            ctx.header("Access-Control-Allow-Headers", "*")
        }

        endpoint.start(config.server.port.toInt())

        println("Started the server.")
        println("Ctrl+C to stop the server.")

        // TODO CLI to process commands (/quit and the like).
    }

}
