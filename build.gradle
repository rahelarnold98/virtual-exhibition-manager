plugins {
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlinVersion"
    id 'org.openapi.generator' version "$openApiGenVersion"
    id 'java'
    id 'application'
    id 'idea'
}

// Allow custom specification of Cineast OpenAPI config via -PapiConfigPath=...
def apiConfigPath = project.properties["apiConfigPath"] ?: "$rootDir/cineast.json"

// Source/Target compatibility (currently used for source & target/JVM).
def javaCompatibility = 11

// Project settings.
group 'ch.unibas.dmi.dbis'
version '2.0.0-SNAPSHOT'

// Main class.
mainClassName = 'ch.unibas.dmi.dbis.vrem.VREMKt'

// Java properties.
java {
    sourceCompatibility = javaCompatibility
    targetCompatibility = javaCompatibility
}

// Application properties.
application {
    applicationDefaultJvmArgs = ["-Xms2G", "-Xmx4G"]
}

// Add generated code to sources.
sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated/src/main/kotlin/"
        }
    }
}

// Jar properties.
tasks.named('jar') {
    manifest {
        attributes 'Version': archiveVersion.get()
        attributes 'Main-Class': mainClassName // Same as for the application plugin.
        attributes 'Manifest-Version': '1.0'
        attributes 'Multi-Release': true
    }

    // Gradle 7.0 requires a duplicate handling strategy or fails if duplicates occur.
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    exclude 'META-INF', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}

// Generate Cineast OpenAPI bindings.
task generateOpenApi(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = 'kotlin'
    inputSpec = apiConfigPath
    packageName = "ch.unibas.dmi.dbis.vrem.cineast.client"
    outputDir = "$buildDir/generated"

    skipValidateSpec = true

    configOptions = [
            enumPropertyNaming: "UPPERCASE"
    ]
}

task copyResources {
    doLast {
        copy {
            from "config.json"
            into "$buildDir/libs/"
        }
    }
}

task deploy {
    dependsOn generateOpenApi, build, copyResources
}

// Regenerate OpenAPI code before building.
compileKotlin {
    mustRunAfter generateOpenApi
    dependsOn generateOpenApi
    kotlinOptions.jvmTarget = javaCompatibility
}

compileTestKotlin {
    mustRunAfter generateOpenApi
    dependsOn generateOpenApi
    kotlinOptions.jvmTarget = javaCompatibility
}

// Regenerate OpenAPI code upon cleaning.
clean {
    finalizedBy generateOpenApi
}

// IntelliJ properties.
idea {
    module {
        // IntelliJ should download Javadoc.
        downloadJavadoc = true

        // Exclude directories from IntelliJ (indexing etc.).
        excludeDirs += file("data")
        excludeDirs += file("logs")
    }
}

repositories {
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

dependencies {
    // CLI.
    implementation group: 'com.github.ajalt', name: 'clikt', version: "$cliktVersion"

    // Kotlinx Serialization.
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-serialization-json', version: "$kotlinxSerializationVersion"

    // KMongo.
    implementation group: 'org.litote.kmongo', name: 'kmongo-serialization', version: "$kmongoVersion"
    implementation group: 'org.litote.kmongo', name: 'kmongo-id-serialization', version: "$kmongoVersion"

    // Javalin.
    implementation group: 'io.javalin', name: 'javalin', version: "$javalinVersion"

    //jetty
    implementation group: 'org.eclipse.jetty.http2', name: 'http2-server', version: "$jettyVersion"
    implementation group: 'org.eclipse.jetty', name: 'jetty-alpn-conscrypt-server', version: "$jettyVersion"
    implementation group: 'org.eclipse.jetty.alpn', name: 'alpn-api', version: "$alpnApiVersion"
    implementation group: 'org.mortbay.jetty.alpn', name: 'alpn-boot', version: "$alpnBootVersion"

    // Fuel.
    implementation group: 'com.github.kittinunf.fuel', name: 'fuel', version: "$fuelVersion"
    implementation group: 'com.github.kittinunf.fuel', name: 'fuel-kotlinx-serialization', version: "$fuelVersion"

    // OpenAPI Dependencies (OkHttp3 and Moshi Serialization).
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: "$okhttpVersion"
    implementation group: 'com.squareup.moshi', name: 'moshi-kotlin', version: "$moshiVersion"

    // Logging.
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: "$log4jslf4jVersion"
    implementation group: 'io.github.microutils', name: 'kotlin-logging-jvm', version: "$kotlinLoggingVersion"

    // Kotlin test & JUnit library.
    testImplementation group: 'org.jetbrains.kotlin', name: 'kotlin-test', version: "$kotlinVersion"
    testImplementation group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version: "$kotlinVersion"
}
